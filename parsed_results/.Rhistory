dat_hw[x,6] <<- NA
}else if (nchar(dat_hw[x,6]) > 30) {
dat_hw[x,6] <<- NA
}
})
dat_hw[,6]
dat_hw[868,6]
strsplit(dat_hw[868,6])
strsplit("$",dat_hw[868,6])
strsplit(dat_hw[868,6],"$")
strsplit(dat_hw[868,6],"$")
strsplit(dat_hw[868,6]," ")
strsplit(dat_hw[868,6],"List")
strsplit(dat_hw[868,6],"$")
strsplit(dat_hw[868,6],"$")[[1]]
strsplit(dat_hw[868,6],"$")[[1]][1]
class(dat_hw[868,6])
strsplit(dat_hw[868,6],"$")[[1]][1]
strsplit(dat_hw[868,6],"$")
gregexpr(pattern ='$',dat_hw[868,6])
dat_hw[868,6]
nchar(dat_hw[868,6])
dat_hw[868,6]
dat_hw[868,6][1:2]
regexpr("$", dat_hw[868,6])
strsplit(dat_hw[868,6], "$")
strsplit(as.character(dat_hw[868,6]), "$")
strsplit(dat_hw[868,6], " ")
strsplit(dat_hw[868,6], "")
strsplit(dat_hw[868,6], "$")
strsplit(dat_hw[868,6], "$ ")
strsplit(dat_hw[868,6], " $")
class(strsplit(dat_hw[868,6], "$"))
strsplit(dat_hw[868,6], " $", fixed = TRUE)
strsplit(dat_hw[868,6],"[$]")
strsplit(dat_hw[868,6],"[$]")[[1]][2]
change3 <-  lapply(1:dim(dat_hw)[1],function(x){
if (nchar(dat_hw[x,6]) > 0) {
dat_hw[x,6] <<- strsplit(dat_hw[x,6],"[$]")[[1]][2]
}
})
change3 <-  lapply(1:dim(dat_hw)[1],function(x){
if (nchar(dat_hw[x,6]) > 0) {
dat_hw[x,6] <<- strsplit(dat_hw[x,6],"[$]")[[1]][2]
}
print(x)
})
nchar(dat_hw[1,6])
dat_hw[1,6] == NA
dat_hw[1,6] != NA
is.na(dat_hw[1,6])
change3 <-  lapply(1:dim(dat_hw)[1],function(x){
if (is.na(dat_hw[x,6]) == FALSE ) {
dat_hw[x,6] <<- strsplit(dat_hw[x,6],"[$]")[[1]][2]
}
})
dat_hw[,6]
dat_hw[,6] <- as.numeric(dat_hw[,6])
dat_hw[,6]
head(dat_hw[,6])
head(dat_hw)
write.csv("BoardGameGeekClean.csv",row.names = FALSE)
write.csv(dat_hw,"BoardGameGeekClean.csv",row.names = FALSE)
correct_test[[1]]
dat_Nbike_test[[1]]
dat_Nbike_test[[1]][Correct_IndexInfo[[1]],]
dat_hw$GameRank
which(dat_hw$GameRank == 'NA')
which(dat_hw$GameRank == NA)
table(dat_hw$GameRank)
is.na(dat_hw$GameRank)
which(is.na(dat_hw$GameRank) == TRUE)
length(which(is.na(dat_hw$GameRank) == TRUE))
length(which(is.na(dat_hw$GameRank) == FALSE))
dat_hw <- dat_hw[which(is.na(dat_hw$GameRank) == FALSE),]
dim(dat_hw)
head(dat_hw)
dat_hw_sort <- hsb2[order(GameRank) , ]
dat_hw_sort <- dat_hw[order(dat_hw$GameRank) , ]
head(dat_hw_sort)
dat_hw_sort$Index <- seq(1,dim(dat_hw_sort)[1],by=1)
head(dat_hw_sort)
8005*.25
8005*.5
8005*.75
dat_hw_sort[!complete.cases(dat_hw_sort),]
8005*.25
RankCategory <- replicate(1,dim(dat_hw_sort)[1])
RankCategory
RankCategory <- replicate(dim(dat_hw_sort)[1],1)
RankCategory
length(RankCategory)
8005*.25
8005*.5
8005*.75
change4 <-  lapply(1:dim(dat_hw_sort)[1],function(x){
if (dat_hw_sort$GameRank[x] > 2001 &  dat_hw_sort$GameRank[x] < 4002 ) {
RankCategory[x] <<- 2
}else if (dat_hw_sort$GameRank[x] > 4002 &  dat_hw_sort$GameRank[x] < 6004 ) {
RankCategory[x] <<- 3
}else if (dat_hw_sort$GameRank[x] > 6004 &  dat_hw_sort$GameRank[x] < 8005 ) {
RankCategory[x] <<- 4
}
})
RankCategory
table(RankCategory)
sum(table(RankCategory))
8005*.25
8005*.5
8005*.75
dim(dat_hw_sort)[1]
dat_hw_sort$GameRank[1]
dat_hw_sort$GameRank[1] > 2001
dat_hw_sort$GameRank[1] > 2001 &  dat_hw_sort$GameRank[1] < 4002
dat_hw_sort$GameRank[2002] > 2001 &  dat_hw_sort$GameRank[2002] < 4002
4002-2001
RankCategory <- replicate(dim(dat_hw_sort)[1],1)
change4 <-  sapply(1:dim(dat_hw_sort)[1],function(x){
if (x > 2001 &  x < 4002 ) {
RankCategory[x] <<- 2
}else if (x > 4002 &  x < 6004 ) {
RankCategory[x] <<- 3
}else if (x > 6004 &  x < 8005 ) {
RankCategory[x] <<- 4
}
})
RankCategory
table(RankCategory)
class(RankCategory)
RankCategory <- replicate(dim(dat_hw_sort)[1],1)
change4 <-  sapply(1:dim(dat_hw_sort)[1],function(x){
if (x > 2000 &  x < 4002 ) {
RankCategory[x] <<- 2
}else if (x > 4002 &  x < 6004 ) {
RankCategory[x] <<- 3
}else if (x > 6004 &  x < 8005 ) {
RankCategory[x] <<- 4
}
})
table(RankCategory)
sum(RankCategory)
sum(table(RankCategory))
RankCategory <- replicate(dim(dat_hw_sort)[1],1)
change4 <-  sapply(1:dim(dat_hw_sort)[1],function(x){
if (x > 1999 &  x < 4003 ) {
RankCategory[x] <<- 2
}else if (x > 4003 &  x < 6005 ) {
RankCategory[x] <<- 3
}else if (x > 6005 &  x < 8005 ) {
RankCategory[x] <<- 4
}
})
table(RankCategory)
RankCategory <- replicate(dim(dat_hw_sort)[1],1)
change4 <-  sapply(1:dim(dat_hw_sort)[1],function(x){
if (x > 1998 &  x < 4003 ) {
RankCategory[x] <<- 2
}else if (x > 4003 &  x < 6003 ) {
RankCategory[x] <<- 3
}else if (x > 6003 &  x < 8005 ) {
RankCategory[x] <<- 4
}
})
table(RankCategory)
RankCategory <- replicate(dim(dat_hw_sort)[1],1)
change4 <-  sapply(1:dim(dat_hw_sort)[1],function(x){
if (x > 1998 &  x < 4004 ) {
RankCategory[x] <<- 2
}else if (x > 4004 &  x < 6003 ) {
RankCategory[x] <<- 3
}else if (x > 6003 &  x < 8005 ) {
RankCategory[x] <<- 4
}
})
table(RankCategory)
RankCategory <- replicate(dim(dat_hw_sort)[1],1)
change4 <-  sapply(1:dim(dat_hw_sort)[1],function(x){
if (x > 1998 &  x < 4001 ) {
RankCategory[x] <<- 2
}else if (x > 4001 &  x < 6003 ) {
RankCategory[x] <<- 3
}else if (x > 6003 &  x < 8005 ) {
RankCategory[x] <<- 4
}
})
table(RankCategory)
class(cbind(dat_hw_sort,RankCategory)
)
dat_final <- cbind(dat_hw_sort,RankCategory)
write.csv(dat_final,"BoardGameGeekClean.csv",row.names = FALSE)
test_Correct <- Correct_IndexInfo[100]
test_test <- correct_test[100]
test_Correct[[1]]
Correct_IndexInfo[[1]]
Correct_IndexInfo[1:100]
test_Correct <- Correct_IndexInfo[1:100]
test_test <- correct_test[1:100]
test_Correct[[1]]
test_test[[1]]
######## Get rid of index with none sequential movement
##### Some part with no non sequential movement, so we add it back
correct_index <- lapply(1:length(index_change_Fix), function(x){
if(is.null( unlist(index_error[x])) == FALSE)
{
unlist(index_change_Fix[[x]])[-unlist(index_error[[x]])]
}
})
Error_index <- lapply(1:length(index_change_Fix), function(x){
if(is.null( unlist(index_error[x])) == TRUE)
{
ind <- x
}
})
Error_index <- unlist(Error_index)
changeprocedure <- lapply(Error_index, function(x){
correct_index[[x]] <<- unlist(index_change_Fix[x])
})
procea <- lapply(1:length(correct_index), function(x){
correct_index[[x]] <<- sort(c(correct_index[[x]],
correct_index[[x]][which(diff(correct_index[[x]]) == 3) ]+1,
correct_index[[x]][which(diff(correct_index[[x]]) == 3) ]+2   )    )
})
procea <- lapply(1:length(correct_index), function(x){
correct_index[[x]] <<- sort(c(correct_index[[x]],
correct_index[[x]][which(diff(correct_index[[x]]) == 4) ]+1,
correct_index[[x]][which(diff(correct_index[[x]]) == 4) ]+2,
correct_index[[x]][which(diff(correct_index[[x]]) == 4) ]+3)    )
})
procea <- lapply(1:length(correct_index), function(x){
correct_index[[x]] <<- sort(c(correct_index[[x]],
correct_index[[x]][which(diff(correct_index[[x]]) == 5) ]+1,
correct_index[[x]][which(diff(correct_index[[x]]) == 5) ]+2,
correct_index[[x]][which(diff(correct_index[[x]]) == 5) ]+3,
correct_index[[x]][which(diff(correct_index[[x]]) == 5) ]+4)    )
})
test_test <- correct_test[1:100]
test_test[[1]]
test_Correct[[1]]
test_Correct[[1]]%in%test_test[[1]]
test_test[[2]] %in% test_Correct[[2]]
test_test[[2]]
test_Correct[[2]]
notmatch <- lapply(1:length(test_test),function(x){
if(sum(test_test[[x]] %in% test_Correct[[x]]) >0 )
{
ind <- x
}
})
unlist(notmatch)
length(unlist(notmatch))
test_test[[1]] %in% test_Correct[[1]]
test_test[[1]]
test_Correct[[1]]
notmatch <- lapply(1:length(test_test),function(x){
test_test[[x]] [which(test_test[[x]] %in% test_Correct[[x]] == FALSE)]
})
notmatch[[1]]
diff(test_Correct[[1]])
notmatch2 <- lapply(1:length(test_test),function(x){
length(whhich(diff(test_Correct[[x]]) > 1) +1 )
})
notmatch2 <- lapply(1:length(test_test),function(x){
length(which(diff(test_Correct[[x]]) > 1) +1 )
})
unlist(notmatch2)
which(diff(test_Correct[[1]]) > 1
)
which(diff(test_Correct[[1]]) > 1)
length(which(diff(test_Correct[[1]]) > 1)) +1
notmatch2 <- lapply(1:length(test_test),function(x){
length(which(diff(test_Correct[[1]]) > 1)) +1
})
unlist(notmatch2)
notmatch2 <- lapply(1:length(test_test),function(x){
length(which(diff(test_Correct[[x]]) > 1)) +1
})
unlist(notmatch2)
notmatch[[1]]
notmatch2 <- lapply(1:length(test_test),function(x){
test_test[[x]] [which(test_test[[x]] %in% test_Correct[[x]] == FALSE)-1]
})
notmatch2[[1]]
notmatch[[1]] - notmatch2[[1]]
notmatch3 <- lapply(1:length(notmatch),function(x){
notmatch[[x]] - notmatch2[[x]]
})
notmatch3[[1]]
notmatch3[[2]]
notmatch3[[3]]
notmatch3[[4]]
notmatch3[[5]]
notmatch3[[6]]
notmatch3[[7]]
notmatch3[[8]]
notmatch3[[9]]
notmatch[[3]]
notmatch2[[3]]
test_test[[3]]
test_Correct[[3]]
notmatch4 <- lapply(1:length(test_test),function(x){
length(which(diff(test_Correct[[x]]) > 1)) +1
})
unlist(notmatch4)
notmatch[[1]]
test_test[[1]]
notmatch[[2]]
test_test[[2]]
notmatch[[3]]
test_test[[3]]
notmatch[[4]]
test_test[[4]]
test_Correct[[4]]
test_test[[1]]
test_Correct[[1]]
test_test[[1]] %in% test_Correct[[1]]
dim(train_test)
library(randomForest)
register_google(key = "AIzaSyDsU98ut76xbm7vHpEqXpc2OVdOStPFvgc", account_type = "standard")
index_End <- lapply(1:length(dat_Trips),function(x){
lapply(1:length(dat_Trips[[x]]), function(y){
dat_Trips[[x]][[y]][(dim(dat_Trips[[x]][[y]])[1]),1]
})
})
End_Trip <- replicate(nrow(dat),0)
index_End <- unlist(index_End)
dat <- dat_train[, -c(2, 3, 4 )]
set.seed(123)
End_Trip <- replicate(nrow(dat),0)
dat <- as.data.frame(cbind(dat,End_Trip))
dat[index_End,12] <- 1
ind <- sample(2,nrow(dat), replace= TRUE, prob = c(0.1,0.9))
train <- dat[ind==1,]
test <- dat[ind==2,]
dim(train)
ind <- sample(2,nrow(dat), replace= TRUE, prob = c(0.01,0.99))
train <- dat[ind==1,]
test <- dat[ind==2,]
dim(train)
names(train)
which(train$End_Trip == 1)
ind <- sample(2,nrow(dat), replace= TRUE, prob = c(0.3,0.7))
train <- dat[ind==1,]
test <- dat[ind==2,]
train_test <- train[,c(12,3,4)]
test_test <- test[,c(12,3,4)]
dim(train_test)
m1 <- lm(train_test$End_Trip~.,data = train_test)
summary(m1)
predict(m1)
which(predict(m1)>0.5)
predict(m1) > 0.5
which(predict(m1) > 0.5 == TRUE)
which(predict(m1) > 0.5) == TRUE
sum(predict(m1) > 0.5)
m1 <- glm(train_test$End_Trip~.,data = train_test, family = 'binomial')
predict(m1)
sum(predict(m1)>0.5)
sum(predict(m1)>-0.5)
predict(m1)>-0.5
predict(m1)[1]
predict(m1)
exp(predict(m1))
exp(predict(m1))>0.5
exp(predict(m1))>0.5[1]
exp(predict(m1))>0.5
which(exp(predict(m1))>0.5 == TRUE)
a <- exp(predict(m1))
a[1]
a[2]
class(a[2])
which(a > 0.5)
which(a > 0.2)
which(a > 0.3)
which(a > 0.15)
ind <- sample(2,nrow(dat), replace= TRUE, prob = c(0.01,0.99))
train <- dat[ind==1,]
test <- dat[ind==2,]
train_test <- train[,c(12,3,4)]
test_test <- test[,c(12,3,4)]
train_test[1]
train_test <- train[,c(12,3,4)]
train_test[1,]
which(train_test$End_Trip == 1)
raange(a)
range(a)
which(a > 0.015)
ind <- sample(2,nrow(dat), replace= TRUE, prob = c(0.3,0.7))
train <- dat[ind==1,]
test <- dat[ind==2,]
train_test <- train[,c(12,3,4)]
test_test <- test[,c(12,3,4)]
m1 <- glm(train_test$End_Trip~.,data = train_test, family = 'binomial')
predict(m1)
a <- exp(predict(m1))
range(a)
which(a>0.015)
which(a>0.010)
which(a>0.012)
which(a>0.011)
which(train_test$End_Trip == 1)
length(which(train_test$End_Trip == 1))
length(which(a>0.010))
which(a>0.010)
which(train_test$End_Trip == 1)
which(a>0.010)%in%which(train_test$End_Trip == 1)
which(train_test$End_Trip == 1)
length(which(train_test$End_Trip == 1))
length(which(a>0.010))
285/1331
which(train_test$End_Trip == 1)
train_test[252,]
fromJSON("https://maps.googleapis.com/maps/api/geocode/json?latlng=38.90913,-77.08284&key=AIzaSyDsU98ut76xbm7vHpEqXpc2OVdOStPFvgc")
fromJSON("https://maps.googleapis.com/maps/api/geocode/json?latlng=-77.08284,38.90913&key=AIzaSyDsU98ut76xbm7vHpEqXpc2OVdOStPFvgc")
train_test[253,]
train_test[260,]
options(digits=9)
train_test[253,]
train_test[252,]
train_test[254,]
train_test[255,]
fromJSON("https://maps.googleapis.com/maps/api/geocode/json?latlng=38.909125,-77.082841&key=AIzaSyDsU98ut76xbm7vHpEqXpc2OVdOStPFvgc")
fromJSON("https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=38.909125,-77.082841&radius=5&key=AIzaSyDsU98ut76xbm7vHpEqXpc2OVdOStPFvgc")
fromJSON("https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=-33.8670522,151.1957362&radius=5&key=AIzaSyDj7F8O0Tu5SFx70Yu-bOCpnSovS2rGuBg")
train_test[252,]
train_test[253,]
train_test[254,]
train_test[255,]
train_test[252,c(3,4)]
train_test[252,c(2,3)]
train_test[252,c(2,3)] %in% train_test[,c(2,3)]
train_test[,c(2,3)]
train_test[1,c(2,3)]
train_test[252,c(2,3)] %in% train_test[1,c(2,3)]
train_test[252,c(2,3)] %in% train_test[2,c(2,3)]
train_test[252,c(2,3)] %in% train_test[1:10,c(2,3)]
train_test[252,c(2,3)] %in% train_test[253,c(2,3)]
dim(train_test)
ind <- sample(2,nrow(dat), replace= TRUE, prob = c(0.01,0.99))
train <- dat[ind==1,]
test <- dat[ind==2,]
train_test <- train[,c(12,3,4)]
which(train_test$End_Trip == 1)
test_test <- test[,c(12,3,4)]
train_test[684,]
train_test[685,]
m1 <- glm(train_test$End_Trip~.,data = train_test, family = 'binomial')
a <- exp(predict(m1))
a
rangee(a)
range(a)
length(which(a>0.005))
length(which(a>0.007))
which(train_test$End_Trip == 1)
which(a>0.007)%in%which(train_test$End_Trip == 1)
which(train_test$End_Trip == 1)
train_test[684,]
train_test[684,c(2,3)]
dim(train_test)
train_test[684,c(2,3)]%in%train_test[1,c(2,3)]
change1 <- lapply(1:dim(train_test)[1], function(x){
if(sum(train_test[684,c(2,3)]%in%train_test[x,c(2,3)])>1){
ind <- x
}
})
unlist(change1)
change1 <- lapply(1:dim(train_test)[1], function(x){
if(sum(train_test[1584,c(2,3)]%in%train_test[x,c(2,3)])>1){
ind <- x
}
})
unlist(change1)
change1 <- lapply(1:dim(train_test)[1], function(x){
if(sum(train_test[1642,c(2,3)]%in%train_test[x,c(2,3)])>1){
ind <- x
}
})
unlist(change1)
which(train_test$End_Trip == 1)
#### Four decimal point perform better
train_test[,c(2,3)] <- trunc(train_test[,c(2,3)]*100000)/100000
rf <- randomForest(as.factor(End_Trip) ~., data = train_test )
print(rf)
change1 <- lapply(1:dim(train_test)[1], function(x){
if(sum(train_test[1884,c(2,3)]%in%train_test[x,c(2,3)])>1){
ind <- x
}
})
unlist(change1)
change1 <- lapply(1:length(which(train_test$End_Trip == 1)), function(x){
lapply(1:dim(train_test)[1], function(y){
if(sum(train_test[x,c(2,3)]%in%train_test[y,c(2,3)])>1){
ind <- x
}
})
})
unlist(change1)
change1[[1]]
ind <- sample(2,nrow(dat), replace= TRUE, prob = c(0.3,0.7))
train <- dat[ind==1,]
test <- dat[ind==2,]
train_test <- train[,c(12,3,4)]
which(train_test$End_Trip == 1)
test_test <- test[,c(12,3,4)]
train_test[1149,c(2,3)]
train_test[1150,c(2,3)]
train_test[1151,c(2,3)]
train_test[1152,c(2,3)]
train_test[1152,]
train_test[1150:1152,]
train_test[11149:1150,]
train_test[1149:1150,]
train_test[1149:1151,]
